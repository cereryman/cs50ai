import os
import random
import re
import sys

SS_DELTA = 0.000001  # Steady state threshold

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print("PageRank Results from Sampling (n = %i)" % (SAMPLES))
    for page in sorted(ranks):
        print("  %s: %.4f" % (page, ranks[page]))
    ranks = iterate_pagerank(corpus, DAMPING)
    print("PageRank Results from Iteration")
    for page in sorted(ranks):
        print("  %s: %.4f" % (page, ranks[page]))


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    pd = {}
    num_pages = len(corpus)
    num_links = len(corpus[page])

    # The return value of the function should be a Python dictionary with one key for each page in the corpus.
    # Each key should be mapped to a value representing the probability that a random surfer would choose that page
    # next. The values in this returned probability distribution should sum to 1.
    if num_links == 0:
        # If node has no out-links, teleport and choose a link at random chosen from all pages in the corpus.
        # If page has no outgoing links, then transition_model should return a probability distribution that chooses
        # randomly among all pages with equal probability. (In other words, if a page has no links, we can pretend
        # it has links to all pages in the corpus, including itself.)
        for key in corpus:
            pd[key] = 1.0 / num_pages  # FLOAT TRUNCATION #%$@ !!!!
    else:
        # If node has outgoing links, probability user chooses a link at random chosen from all pages in the corpus.
        # With probability 1 - damping_factor, the random surfer should randomly choose one of all pages in the corpus
        # with equal probability.
        for key in corpus:
            pd[key] = (1 - damping_factor) * (1.0 / num_pages)  # FLOAT TRUNCATION #%$@ !!!!
        # probability that user takes a normal random walk
        # With probability damping_factor, the random surfer should randomly choose one of the links from page
        # with equal probability.
        for key in corpus[page]:
            pd[key] += damping_factor / num_links

    return pd


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    if len(corpus) == 0:
        return

    # The return value of the function should be a Python dictionary with one key for each page in the corpus.
    # Each key should be mapped to a value representing that page’s estimated PageRank (i.e., the proportion of all
    # the samples that corresponded to that page). The values in this dictionary should sum to 1.
    default_prob = 0
    pr = dict.fromkeys(corpus.keys(), default_prob)
    # The first sample should be generated by choosing from a page at random.
    page = random.choices(list(corpus.keys()), weights=None, cum_weights=None, k=1)[0]
    # For each of the remaining samples, the next sample should be generated from the previous
    # sample based on the previous sample’s transition model.
    for i in range(n):  # You may assume that n will be at least 1.
        old_pr = transition_model(corpus, page, damping_factor)
        pr[page] += 1
        # You will likely want to pass the previous sample into your transition_model function, along with the
        # corpus and the damping_factor, to get the probabilities for the next sample.
        page = random.choices(list(old_pr.keys()), weights=list(old_pr.values()), cum_weights=None, k=1)[0]

    # Normalize the output
    for key in pr:
        pr[key] /= n

    return pr


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    if len(corpus) == 0:
        return

    # The return value of the function should be a Python dictionary with one key for each page in the corpus.
    # Each key should be mapped to a value representing that page’s PageRank. The values in this dictionary should
    # sum to 1.
    num_pages = len(corpus)

    # Move this logic here to ensure it is applied beforehand.
    # A page that has no links at all should be interpreted as having one link for every page in the corpus
    #  (including itself).
    for key, value in corpus.items():
        if len(value) == 0:
            corpus[key] = list(corpus.keys())

    # The function should begin by assigning each page a rank of 1 / N, where N is the total number of
    # pages in the corpus.
    default_prob = 1.0 / num_pages
    pr = dict.fromkeys(corpus.keys(), default_prob)

    stop_flag = False

    while not stop_flag:
        old_pr = pr.copy()
        # The function should then repeatedly calculate new rank values based on all of the current rank values,
        # according to the PageRank formula in the “Background” section. (i.e., calculating a page’s PageRank based
        # on the PageRanks of all pages that link to it).
        for key in corpus:
            pr[key] = ((1 - damping_factor)/num_pages) + (damping_factor * sum_term(corpus, damping_factor, pr, key))
            delta = abs(old_pr[key] - pr[key])
            # This process should repeat until no PageRank value changes by more than 0.001 between the current
            # rank values and the new rank values.
            # Print a simple key so that can plot and find the required SS_DELTA for steady state
            # (SS seems occur at approximately 22 iterations for Corpus 2)
            # debug if key == "programming.html":
            # debug   print(pr[key])
            if delta <= SS_DELTA:
                stop_flag = True

    return pr


def sum_term(corpus, damping_factor, pr, page):
    # Easier to move to separate function because of recursivity
    sum_term_output = 0

    for key, value in corpus.items():
        # Moved to top of iterative logic
        # A page that has no links at all should be interpreted as having one link for every page in the corpus
        #  (including itself).
        # if not value:
        #    value = corpus.keys()
        if page in corpus[key]:
            # sum_term_output += (1 - damping_factor) / len(corpus) + damping_factor * (pr[key] / len(value))
            sum_term_output += pr[key] / len(value)

    return sum_term_output


if __name__ == "__main__":
    main()
